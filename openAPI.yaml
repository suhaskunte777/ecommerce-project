openapi: 3.0.0
info:
  title: Laravel Product API
  version: 1.0.0
  description: REST API for managing products and reviews in a Laravel application

servers:
  - url: http://localhost:8000/api

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        price:
          type: number
        image:
          type: string
        available:
          type: string
        description:
          type: string
        rating:
          type: number
        category:
          $ref: '#/components/schemas/Category'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time

    Review:
      type: object
      properties:
        id:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        reviewer:
          $ref: '#/components/schemas/User'
        rating:
          type: number
        comment:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time

paths:
  /products:
    get:
      summary: Get a list of products
      parameters:
        - name: page
          in: query
          description: The page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: perPage
          in: query
          description: The number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              data:
                - id: 1
                  name: "Product 1"
                  slug: "product-1"
                  price: "877.00"
                  image: "/link/to/image"
                  available: "yes"
                  description: "Lorem ipsum"
                  category:
                      id: 2
                      name: "Category 2"
                      slug: "category-2"
                - id: 2
                  name: "Product 2"
                  slug: "product-2"
                  price: "567.00"
                  image: "/link/to/image"
                  available: "no"
                  description: "Lorem ipsum"
                  category:
                      id: 1
                      name: "Category 1"
                      slug: "category-1"
              links:
                first : "http://localhost:8000/api/products?page=1"
                last : "http://localhost:8000/api/products?page=5"
                prev : null
                next : "http://localhost:8000/api/products?page=2"
              meta:
                current_page: 1,
                from: 1,
                last_page: 5,
                path: "http://localhost:8000/api/products",
                per_page: 10,
                to: 10,
                total: 50
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            example:
              name : "Product Name",
              price: 55000,
              description : "description of product",
              images: "url/to/image",
              categoryId: 1,
              availability: 1
      responses:
        '201':
          data:
              name : "Product Name",
              price: 55000,
              description : "description of product",
              images: "url/to/image",
              categoryId: 1,
              availability: 1
  /products/{productId}:
    get:
      summary: Get details of a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
                id: 1
                name: "Product 1"
                price: 19.99
        '404':
          content:
            application/json:
              message: "Resource not found"
    put:
      summary: Update details of a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "Updated Product"
              price: 24.99
      responses:
        '200':
          description: Product updated successfully
        '422':
          message: "The price field is required.",
          errors:
            field:
              error1: "The price field is required."
              error2: "The price field must be interger."

    delete:
      summary: Delete a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully

  /products/soft-deleted:
    get:
      summary: Get a list of soft-deleted products
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                - id: 3
                  name: "Soft-Deleted Product 1"
                - id: 4
                  name: "Soft-Deleted Product 2"

  /products/{productId}/soft-deleted:
    get:
      summary: Get details of a specific soft-deleted product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the soft-deleted product
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                id: 3
                name: "Soft-Deleted Product 1"
  /products/{productId}/reviews:
    get:
      summary: Get reviews for a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                - id: 1
                  user_id: 1
                  rating: 4.5
                  comment: "Great product!"
                - id: 2
                  user_id: 2
                  rating: 5
                  comment: "Excellent quality!"

    post:
      summary: Add a new review for a product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              user_id: 3
              rating: 4
              comment: "Good product, but could be better"
      responses:
        '201':
          description: Review added successfully

  /products/{productId}/reviews/{reviewId}:
    get:
      summary: Get details of a specific review for a product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
        - name: reviewId
          in: path
          required: true
          description: ID of the review
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                id: 1
                user_id: 1
                rating: 4.5
                comment: "Great product!"

    put:
      summary: Update a review for a product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
        - name: reviewId
          in: path
          required: true
          description: ID of the review
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              rating: 5
              comment: "Excellent product, highly recommended"
      responses:
        '200':
          description: Review updated successfully

    delete:
      summary: Delete a review for a product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
        - name: reviewId
          in: path
          required: true
          description: ID of the review
          schema:
            type: integer
      responses:
        '204':
          description: Review deleted successfully

  /products/{productId}/reviews/soft-deleted:
    get:
      summary: Get soft-deleted reviews for a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                - id: 3
                  user_id: 2
                  rating: 3
                  comment: "Not satisfied"
                - id: 4
                  user_id: 3
                  rating: 2
                  comment: "Needs improvement"

  /products/{productId}/reviews/{reviewId}/soft-deleted:
    get:
      summary: Get details of a specific soft-deleted review for a product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
        - name: reviewId
          in: path
          required: true
          description: ID of the soft-deleted review
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                id: 3
                user_id: 2
                rating: 3
                comment: "Not satisfied"
